name: CI/CD Pipeline for FastAPI on AWS EKS

# Trigger the workflow on pushes to the 'main' branch
on:
  push:
    branches:
      - main

# Set permissions for the job, crucial for OIDC authentication
permissions:
  id-token: write
  contents: read

env:
  # Environment variables accessible to all steps in the job
  AWS_REGION: ${{ secrets.AWS_REGION }}
  ECR_REPOSITORY: ${{ secrets.AWS_ECR_REPOSITORY }}
  EKS_CLUSTER_NAME: ${{ secrets.AWS_EKS_CLUSTER_NAME }}
  
jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_OIDC_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        
      - name: Build and push Docker image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:latest -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: ECR image cleanup
        run: |
          images_to_delete=$(aws ecr describe-images --repository-name $ECR_REPOSITORY \
            --query 'imageDetails[?!contains(imageTags, `latest`)].imageDigest' \
            --output text)
          if [ -n "$images_to_delete" ]; then
            echo "Images without 'latest' tag to delete: $images_to_delete"
            image_ids=$(echo $images_to_delete | tr ' ' '\n' | sed 's/^/imageDigest=/')
            aws ecr batch-delete-image --repository-name $ECR_REPOSITORY --image-ids $image_ids || true
            echo "Cleanup complete."
          else
            echo "No images to clean up."
          fi
      
      - name: Configure Kubernetes client
        run: | 
          aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.EKS_CLUSTER_NAME }} 

      - name: Create or update Kubernetes secret
        run: |
          kubectl create secret generic fastapi-secrets --from-literal=GOOGLE_API_KEY=${{ secrets.GOOGLE_API_KEY }} --dry-run=client -o yaml | kubectl apply -f -
      
      - name: Deploy to EKS
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          FULL_IMAGE_URI="$ECR_REGISTRY/$ECR_REPOSITORY:latest"
          echo "Updating deployment file with image: $FULL_IMAGE_URI"
          # Use 'sed' to update the deployment file with the new image tag
          sed -i "s|<your-ecr-repo-name>:latest|$FULL_IMAGE_URI|g" deployment.yaml
          
          # Apply the changes to the Kubernetes cluster
          kubectl apply -f deployment.yaml