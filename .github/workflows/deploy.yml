name: Deploy to EC2 via Docker & ECR

on:
  push:
    branches:
      - main

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
  GOOGLE_API_KEY: ${{ secrets.GOOGLE_API_KEY }}

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build Docker image
        id: build-image
        run: |
          IMAGE_TAG=latest
          ECR_REGISTRY=${{ steps.login-ecr.outputs.registry }}
          docker build -t $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:$IMAGE_TAG .
          echo "IMAGE=$ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:$IMAGE_TAG" >> $GITHUB_ENV

      - name: Delete previous image from ECR (except latest)
        run: |
          IMAGE_TAGS=$(aws ecr list-images --repository-name ${{ env.ECR_REPOSITORY }} --query 'imageIds[?imageTag!=`latest`]' --output json)
          if [ "$IMAGE_TAGS" != "[]" ]; then
            aws ecr batch-delete-image --repository-name ${{ env.ECR_REPOSITORY }} --image-ids "$IMAGE_TAGS"
          fi

      - name: Push Docker image to ECR
        run: |
          docker push ${{ env.IMAGE }}

      - name: Deploy on EC2 via SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: ${{ secrets.EC2_PORT }}
          script: |
            set -e
            export AWS_REGION=${{ env.AWS_REGION }}
            export ECR_REGISTRY=${{ steps.login-ecr.outputs.registry }}
            export ECR_REPOSITORY=${{ env.ECR_REPOSITORY }}
            export IMAGE_TAG=latest

            # Authenticate Docker to ECR
            aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_REGISTRY

            # Remove old image(s) except latest
            docker images "$ECR_REGISTRY/$ECR_REPOSITORY" --format "{{.Repository}}:{{.Tag}}" | grep -v ":latest" | xargs -r docker rmi || true

            # Pull latest image
            docker pull $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

            # Go to app directory (update path if needed)
            cd /home/ubuntu/AI-Resume-Analyzer-and-Cover-Letter-Generator


            # Update docker-compose.yml image reference if needed (optional, if using env var in compose file)
            export ECR_REGISTRY=$ECR_REGISTRY
            export ECR_REPOSITORY=$ECR_REPOSITORY

            # Stop and remove old containers
            docker compose down || true

            # Remove any dangling images
            docker image prune -f

            # Start new container(s) with latest image
            docker compose up -d --remove-orphans

